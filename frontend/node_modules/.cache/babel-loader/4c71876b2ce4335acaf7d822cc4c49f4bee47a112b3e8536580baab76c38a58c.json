{"ast":null,"code":"import plans from './degreeCourses.json';\nexport const extractPlanNames = () => {\n  return plans.map(plan => plan.planName);\n};\nexport const findPlanByID = planID => {\n  return plans.find(plan => plan.planID === planID);\n};\nexport const findCategoryByID = (planID, categoryID) => {\n  const plan = findPlanByID(planID);\n  return plan.find(category => category.categoryID === categoryID);\n};\nexport const countTotalGroups = planID => {\n  const plan = findPlanByID(planID);\n  return plan.degreeCourses.length;\n};\nexport const countTotalCourses = planID => {\n  const plan = findPlanByID(planID);\n  return plan.degreeCourses.reduce((count, category) => count + category.courses.length, 0);\n};\nexport const countTotalScheduleCourses = planID => {\n  const plan = findPlanByID(planID);\n  return plan.schedule.reduce((total, term) => total + term.coursesNr.length, 0);\n};\nexport const getTotalECTS = planID => {\n  return findPlanByID(planID).totalECTS;\n};\nexport const getDegreeName = planID => {\n  return findPlanByID(planID).degree;\n};\nexport const countTotalScheduleECTS = planID => {\n  const plan = findPlanByID(planID);\n  if (!plan) {\n    throw new Error(`Plan with ID ${planID} not found`);\n  }\n  const allCoursesNr = plan.schedule.flatMap(term => term.coursesNr);\n  const allCourses = [...plan.degreeCourses.flatMap(category => category.courses), ...plan.electiveCourses.courses];\n  return allCourses.filter(course => allCoursesNr.includes(course.courseNr)).reduce((total, course) => total + course.ects, 0);\n};\nexport const countCoursesInSchedule = (planID, courses) => {\n  const plan = findPlanByID(planID);\n  const courseNrs = courses.map(course => course.courseNr);\n  const scheduleCourseNrs = plan.schedule.flatMap(term => term.coursesNr);\n  return courseNrs.reduce((total, courseNr) => {\n    return total + (scheduleCourseNrs.includes(courseNr) ? 1 : 0);\n  }, 0);\n};\nexport const getCoursesInSchedule = (planID, courses) => {\n  const plan = findPlanByID(planID);\n  const scheduleCourseNrs = plan.schedule.flatMap(term => term.coursesNr);\n  const coursesNotInSchedule = courses.filter(course => scheduleCourseNrs.includes(course.courseNr));\n  return coursesNotInSchedule;\n};\nexport const getCoursesNotInSchedule = (planID, courses) => {\n  const plan = findPlanByID(planID);\n  const scheduleCourseNrs = plan.schedule.flatMap(term => term.coursesNr);\n  const coursesNotInSchedule = courses.filter(course => !scheduleCourseNrs.includes(course.courseNr));\n  return coursesNotInSchedule;\n};\nexport const getCourseTermDetails = (planID, courseNr) => {\n  const plan = findPlanByID(planID);\n  for (const term of plan.schedule) {\n    if (term.coursesNr.includes(courseNr)) {\n      return term.season + \" \" + term.year;\n    }\n  }\n};\nexport const getElectivesNotInSchedule = planID => {\n  const plan = findPlanByID(planID);\n  const scheduleCourseNrs = plan.schedule.flatMap(term => term.coursesNr);\n  return plan.electiveCourses.courses.filter(course => !scheduleCourseNrs.includes(course.courseNr));\n};\nexport const getElectivesInSchedule = planID => {\n  const plan = findPlanByID(planID);\n  const scheduleCourseNrs = plan.schedule.flatMap(term => term.coursesNr);\n  return plan.electiveCourses.courses.filter(course => scheduleCourseNrs.includes(course.courseNr));\n};\nexport const getAllCourses = planID => {\n  const plan = findPlanByID(planID);\n  return [...plan.degreeCourses.flatMap(category => category.courses), ...plan.electiveCourses.courses];\n};\nexport const findCourseByNumber = (planID, courseNr) => {\n  const allCourses = getAllCourses(planID);\n  return allCourses.find(course => course.courseNr === courseNr);\n};\nexport const findCategoryColorByCourseNumber = (planID, courseNr) => {\n  const plan = findPlanByID(planID);\n  for (const category of plan.degreeCourses) {\n    if (category.courses.some(course => course.courseNr === courseNr)) {\n      return category.color;\n    }\n  }\n  if (plan.electiveCourses.courses.some(course => course.courseNr === courseNr)) {\n    return plan.electiveCourses.color;\n  }\n};\nexport const countTotalCreditsInTerm = (planID, semester) => {\n  return semester.coursesNr.reduce((total, courseNr) => {\n    const course = findCourseByNumber(planID, courseNr);\n    return total + (course ? course.ects : 0);\n  }, 0);\n};","map":{"version":3,"names":["plans","extractPlanNames","map","plan","planName","findPlanByID","planID","find","findCategoryByID","categoryID","category","countTotalGroups","degreeCourses","length","countTotalCourses","reduce","count","courses","countTotalScheduleCourses","schedule","total","term","coursesNr","getTotalECTS","totalECTS","getDegreeName","degree","countTotalScheduleECTS","Error","allCoursesNr","flatMap","allCourses","electiveCourses","filter","course","includes","courseNr","ects","countCoursesInSchedule","courseNrs","scheduleCourseNrs","getCoursesInSchedule","coursesNotInSchedule","getCoursesNotInSchedule","getCourseTermDetails","season","year","getElectivesNotInSchedule","getElectivesInSchedule","getAllCourses","findCourseByNumber","findCategoryColorByCourseNumber","some","color","countTotalCreditsInTerm","semester"],"sources":["/Users/cristianplacinta/DTU/Course-Path/frontend/src/components/Planner/utils.js"],"sourcesContent":["import plans from './degreeCourses.json'\n\nexport const extractPlanNames = () => {\n  return plans.map(plan => plan.planName)\n}\n\nexport const findPlanByID = (planID) => {\n  return plans.find(plan => plan.planID === planID)\n}\n\nexport const findCategoryByID = (planID, categoryID) => {\n    const plan = findPlanByID(planID)\n    return plan.find(category => category.categoryID === categoryID)\n}\n\nexport const countTotalGroups = (planID) => {\n  const plan = findPlanByID(planID)\n  return plan.degreeCourses.length\n}\n\nexport const countTotalCourses = (planID) => {\n  const plan = findPlanByID(planID)\n  return plan.degreeCourses.reduce((count, category) => count + category.courses.length, 0)\n}\n\nexport const countTotalScheduleCourses = (planID) => {\n  const plan = findPlanByID(planID)\n  return plan.schedule.reduce((total, term) => total + term.coursesNr.length, 0)\n}\n\nexport const getTotalECTS = (planID) => {\n  return findPlanByID(planID).totalECTS\n}\n\nexport const getDegreeName = (planID) => {\n  return findPlanByID(planID).degree\n}\n\nexport const countTotalScheduleECTS = (planID) => {\n    const plan = findPlanByID(planID)\n    if (!plan) {\n      throw new Error(`Plan with ID ${planID} not found`)\n    }\n  \n    const allCoursesNr = plan.schedule.flatMap(term => term.coursesNr)\n    const allCourses = [\n      ...plan.degreeCourses.flatMap(category => category.courses),\n      ...plan.electiveCourses.courses\n    ]\n  \n    return allCourses\n      .filter(course => allCoursesNr.includes(course.courseNr))\n      .reduce((total, course) => total + course.ects, 0)\n}\n  \n\nexport const countCoursesInSchedule = (planID, courses) => {\n    const plan = findPlanByID(planID)\n    const courseNrs = courses.map(course => course.courseNr)\n    const scheduleCourseNrs = plan.schedule.flatMap(term => term.coursesNr)\n    return courseNrs.reduce((total, courseNr) => {\n      return total + (scheduleCourseNrs.includes(courseNr) ? 1 : 0)\n    }, 0)\n}\n\nexport const getCoursesInSchedule = (planID, courses) => {\n    const plan = findPlanByID(planID)\n    const scheduleCourseNrs = plan.schedule.flatMap(term => term.coursesNr)\n    const coursesNotInSchedule = courses.filter(course => scheduleCourseNrs.includes(course.courseNr))\n    return coursesNotInSchedule\n}\n\nexport const getCoursesNotInSchedule = (planID, courses) => {\n    const plan = findPlanByID(planID)\n    const scheduleCourseNrs = plan.schedule.flatMap(term => term.coursesNr)\n    const coursesNotInSchedule = courses.filter(course => !scheduleCourseNrs.includes(course.courseNr))\n    return coursesNotInSchedule\n}\n  \nexport const getCourseTermDetails = (planID, courseNr) => {\n    const plan = findPlanByID(planID)\n    for (const term of plan.schedule) {\n      if (term.coursesNr.includes(courseNr)) {\n        return term.season + \" \" + term.year\n      }\n    }\n}\n\nexport const getElectivesNotInSchedule = (planID) => {\n    const plan = findPlanByID(planID)\n    const scheduleCourseNrs = plan.schedule.flatMap(term => term.coursesNr)\n    return plan.electiveCourses.courses.filter(course => !scheduleCourseNrs.includes(course.courseNr))\n}\n\nexport const getElectivesInSchedule = (planID) => {\n    const plan = findPlanByID(planID)\n    const scheduleCourseNrs = plan.schedule.flatMap(term => term.coursesNr)\n    return plan.electiveCourses.courses.filter(course => scheduleCourseNrs.includes(course.courseNr))\n}\n  \nexport const getAllCourses = (planID) => {\n    const plan = findPlanByID(planID)\n    return [\n        ...plan.degreeCourses.flatMap(category => category.courses),\n        ...plan.electiveCourses.courses\n    ]\n}\n\nexport const findCourseByNumber = (planID, courseNr) => {\n    const allCourses = getAllCourses(planID)\n    return allCourses.find(course => course.courseNr === courseNr)\n}\n  \nexport const findCategoryColorByCourseNumber = (planID, courseNr) => {\n    const plan = findPlanByID(planID)\n    for (const category of plan.degreeCourses) {\n      if (category.courses.some(course => course.courseNr === courseNr)) {\n        return category.color\n      }\n    }\n    if (plan.electiveCourses.courses.some(course => course.courseNr === courseNr)) {\n      return plan.electiveCourses.color\n    }\n}\n\nexport const countTotalCreditsInTerm = (planID, semester) => {\n    return semester.coursesNr.reduce((total, courseNr) => {\n      const course = findCourseByNumber(planID, courseNr)\n      return total + (course ? course.ects : 0)\n    }, 0)\n}\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}