{"ast":null,"code":"var _jsxFileName = \"/Users/cristianplacinta/DTU/Course-Path/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Routes, useNavigate, Navigate } from 'react-router-dom';\nimport Header from './components/Header/Header';\nimport CourseList from './components/CourseList/CourseList';\nimport Planner from './components/Planner/Planner';\nimport LoginPage from './components/LoginPage/LoginPage';\nimport './App.css';\n\n// Define the expiry timer in minutes for user inactivity\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst expiryTimer = 30; // 30 minutes\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(AppRoutes, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nfunction AppRoutes() {\n  _s();\n  // Set initial authentication state based on localStorage\n  const [isAuthenticated, setIsAuthenticated] = useState(() => {\n    const storedAuth = localStorage.getItem('isAuthenticated');\n    const expiryTime = localStorage.getItem('expiryTime');\n    const currentTime = new Date().getTime();\n    // Return true if user is authenticated and session hasn't expired\n    return storedAuth === 'true' && expiryTime && currentTime < expiryTime;\n  });\n  const navigate = useNavigate(); // Hook to programmatically navigate between routes\n\n  // Function to handle login\n  const handleLogin = () => {\n    const expiryTime = new Date().getTime() + expiryTimer * 60 * 1000; // Set expiry time to 30 minutes from now\n    localStorage.setItem('isAuthenticated', 'true'); // Save authentication status to localStorage\n    localStorage.setItem('expiryTime', expiryTime); // Save expiry time to localStorage\n    setIsAuthenticated(true); // Update authentication state\n    navigate('/'); // Navigate to the home page after login\n  };\n\n  // Function to handle logout\n  const handleLogout = () => {\n    localStorage.removeItem('isAuthenticated'); // Remove authentication status from localStorage\n    localStorage.removeItem('expiryTime'); // Remove expiry time from localStorage\n    setIsAuthenticated(false); // Update authentication state\n    navigate('/login'); // Navigate to the login page after logout\n  };\n\n  // Use effect to monitor user session and activity\n  useEffect(() => {\n    const checkSession = () => {\n      const storedAuth = localStorage.getItem('isAuthenticated');\n      const expiryTime = localStorage.getItem('expiryTime');\n      const currentTime = new Date().getTime();\n      // Logout if the session has expired\n      if (storedAuth === 'true' && expiryTime && currentTime >= expiryTime) {\n        handleLogout();\n      }\n    };\n\n    // Function to reset the session timeout on user activity\n    const handleUserActivity = () => {\n      const newExpiryTime = new Date().getTime() + expiryTimer * 60 * 1000; // Reset expiry time to 30 minutes from now\n      localStorage.setItem('expiryTime', newExpiryTime); // Update expiry time in localStorage\n    };\n    checkSession(); // Check session expiry on component mount\n\n    // Set up event listeners to detect user activity\n    window.addEventListener('mousemove', handleUserActivity);\n    window.addEventListener('keydown', handleUserActivity);\n    window.addEventListener('scroll', handleUserActivity);\n\n    // Clean up event listeners on component unmount\n    return () => {\n      window.removeEventListener('mousemove', handleUserActivity);\n      window.removeEventListener('keydown', handleUserActivity);\n      window.removeEventListener('scroll', handleUserActivity);\n    };\n  }, [isAuthenticated]); // Dependency array includes isAuthenticated to re-run effect when it changes\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isAuthenticated ?\n    /*#__PURE__*/\n    // Render authenticated routes and components\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        onLogout: handleLogout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(CourseList, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 38\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/courses\",\n          element: /*#__PURE__*/_jsxDEV(CourseList, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 45\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/planner\",\n          element: /*#__PURE__*/_jsxDEV(Planner, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 45\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) :\n    /*#__PURE__*/\n    // Render login route if user is not authenticated\n    _jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/login\",\n        element: /*#__PURE__*/_jsxDEV(LoginPage, {\n          onLogin: handleLogin\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 41\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"*\",\n        element: /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 36\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(AppRoutes, \"RzGTb3Dk7NJvY5WpAf9+ZJ5ZkYw=\", false, function () {\n  return [useNavigate];\n});\n_c2 = AppRoutes;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"AppRoutes\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Route","Routes","useNavigate","Navigate","Header","CourseList","Planner","LoginPage","jsxDEV","_jsxDEV","Fragment","_Fragment","expiryTimer","App","className","children","AppRoutes","fileName","_jsxFileName","lineNumber","columnNumber","_c","_s","isAuthenticated","setIsAuthenticated","storedAuth","localStorage","getItem","expiryTime","currentTime","Date","getTime","navigate","handleLogin","setItem","handleLogout","removeItem","checkSession","handleUserActivity","newExpiryTime","window","addEventListener","removeEventListener","onLogout","path","element","onLogin","to","_c2","$RefreshReg$"],"sources":["/Users/cristianplacinta/DTU/Course-Path/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Routes, useNavigate, Navigate } from 'react-router-dom';\nimport Header from './components/Header/Header';\nimport CourseList from './components/CourseList/CourseList';\nimport Planner from './components/Planner/Planner';\nimport LoginPage from './components/LoginPage/LoginPage';\nimport './App.css';\n\n// Define the expiry timer in minutes for user inactivity\nconst expiryTimer = 30; // 30 minutes\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        {/* Render the routes */}\n        <AppRoutes />\n      </Router>\n    </div>\n  );\n}\n\nfunction AppRoutes() {\n  // Set initial authentication state based on localStorage\n  const [isAuthenticated, setIsAuthenticated] = useState(() => {\n    const storedAuth = localStorage.getItem('isAuthenticated');\n    const expiryTime = localStorage.getItem('expiryTime');\n    const currentTime = new Date().getTime();\n    // Return true if user is authenticated and session hasn't expired\n    return storedAuth === 'true' && expiryTime && currentTime < expiryTime;\n  });\n\n  const navigate = useNavigate(); // Hook to programmatically navigate between routes\n\n  // Function to handle login\n  const handleLogin = () => {\n    const expiryTime = new Date().getTime() + expiryTimer * 60 * 1000; // Set expiry time to 30 minutes from now\n    localStorage.setItem('isAuthenticated', 'true'); // Save authentication status to localStorage\n    localStorage.setItem('expiryTime', expiryTime); // Save expiry time to localStorage\n    setIsAuthenticated(true); // Update authentication state\n    navigate('/'); // Navigate to the home page after login\n  };\n\n  // Function to handle logout\n  const handleLogout = () => {\n    localStorage.removeItem('isAuthenticated'); // Remove authentication status from localStorage\n    localStorage.removeItem('expiryTime'); // Remove expiry time from localStorage\n    setIsAuthenticated(false); // Update authentication state\n    navigate('/login'); // Navigate to the login page after logout\n  };\n\n  // Use effect to monitor user session and activity\n  useEffect(() => {\n    const checkSession = () => {\n      const storedAuth = localStorage.getItem('isAuthenticated');\n      const expiryTime = localStorage.getItem('expiryTime');\n      const currentTime = new Date().getTime();\n      // Logout if the session has expired\n      if (storedAuth === 'true' && expiryTime && currentTime >= expiryTime) {\n        handleLogout();\n      }\n    };\n\n    // Function to reset the session timeout on user activity\n    const handleUserActivity = () => {\n      const newExpiryTime = new Date().getTime() + expiryTimer * 60 * 1000; // Reset expiry time to 30 minutes from now\n      localStorage.setItem('expiryTime', newExpiryTime); // Update expiry time in localStorage\n    };\n\n    checkSession(); // Check session expiry on component mount\n\n    // Set up event listeners to detect user activity\n    window.addEventListener('mousemove', handleUserActivity);\n    window.addEventListener('keydown', handleUserActivity);\n    window.addEventListener('scroll', handleUserActivity);\n\n    // Clean up event listeners on component unmount\n    return () => {\n      window.removeEventListener('mousemove', handleUserActivity);\n      window.removeEventListener('keydown', handleUserActivity);\n      window.removeEventListener('scroll', handleUserActivity);\n    };\n  }, [isAuthenticated]); // Dependency array includes isAuthenticated to re-run effect when it changes\n\n  return (\n    <>\n      {isAuthenticated ? (\n        // Render authenticated routes and components\n        <>\n          <Header onLogout={handleLogout} />\n          <Routes>\n            <Route path=\"/\" element={<CourseList />} />\n            <Route path=\"/courses\" element={<CourseList />} />\n            <Route path=\"/planner\" element={<Planner />} /> \n            {/* <Route path=\"*\" element={<PageNotFound />} /> Uncomment to add a page not found component */}\n          </Routes>\n        </>\n      ) : (\n        // Render login route if user is not authenticated\n        <Routes>\n          <Route path=\"/login\" element={<LoginPage onLogin={handleLogin} />} /> \n          <Route path=\"*\" element={<Navigate to=\"/login\" />} /> \n        </Routes>\n      )}\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,aAAa,IAAIC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEC,WAAW,EAAEC,QAAQ,QAAQ,kBAAkB;AAChG,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,OAAO,MAAM,8BAA8B;AAClD,OAAOC,SAAS,MAAM,kCAAkC;AACxD,OAAO,WAAW;;AAElB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,WAAW,GAAG,EAAE,CAAC,CAAC;;AAExB,SAASC,GAAGA,CAAA,EAAG;EACb,oBACEJ,OAAA;IAAKK,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBN,OAAA,CAACV,MAAM;MAAAgB,QAAA,eAELN,OAAA,CAACO,SAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACC,EAAA,GATQR,GAAG;AAWZ,SAASG,SAASA,CAAA,EAAG;EAAAM,EAAA;EACnB;EACA,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAG5B,QAAQ,CAAC,MAAM;IAC3D,MAAM6B,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;IAC1D,MAAMC,UAAU,GAAGF,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IACrD,MAAME,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;IACxC;IACA,OAAON,UAAU,KAAK,MAAM,IAAIG,UAAU,IAAIC,WAAW,GAAGD,UAAU;EACxE,CAAC,CAAC;EAEF,MAAMI,QAAQ,GAAG9B,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEhC;EACA,MAAM+B,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAML,UAAU,GAAG,IAAIE,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,GAAGnB,WAAW,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;IACnEc,YAAY,CAACQ,OAAO,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC,CAAC;IACjDR,YAAY,CAACQ,OAAO,CAAC,YAAY,EAAEN,UAAU,CAAC,CAAC,CAAC;IAChDJ,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1BQ,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;EACjB,CAAC;;EAED;EACA,MAAMG,YAAY,GAAGA,CAAA,KAAM;IACzBT,YAAY,CAACU,UAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC;IAC5CV,YAAY,CAACU,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC;IACvCZ,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;IAC3BQ,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;EACtB,CAAC;;EAED;EACAnC,SAAS,CAAC,MAAM;IACd,MAAMwC,YAAY,GAAGA,CAAA,KAAM;MACzB,MAAMZ,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;MAC1D,MAAMC,UAAU,GAAGF,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;MACrD,MAAME,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;MACxC;MACA,IAAIN,UAAU,KAAK,MAAM,IAAIG,UAAU,IAAIC,WAAW,IAAID,UAAU,EAAE;QACpEO,YAAY,CAAC,CAAC;MAChB;IACF,CAAC;;IAED;IACA,MAAMG,kBAAkB,GAAGA,CAAA,KAAM;MAC/B,MAAMC,aAAa,GAAG,IAAIT,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,GAAGnB,WAAW,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;MACtEc,YAAY,CAACQ,OAAO,CAAC,YAAY,EAAEK,aAAa,CAAC,CAAC,CAAC;IACrD,CAAC;IAEDF,YAAY,CAAC,CAAC,CAAC,CAAC;;IAEhB;IACAG,MAAM,CAACC,gBAAgB,CAAC,WAAW,EAAEH,kBAAkB,CAAC;IACxDE,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEH,kBAAkB,CAAC;IACtDE,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAEH,kBAAkB,CAAC;;IAErD;IACA,OAAO,MAAM;MACXE,MAAM,CAACE,mBAAmB,CAAC,WAAW,EAAEJ,kBAAkB,CAAC;MAC3DE,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEJ,kBAAkB,CAAC;MACzDE,MAAM,CAACE,mBAAmB,CAAC,QAAQ,EAAEJ,kBAAkB,CAAC;IAC1D,CAAC;EACH,CAAC,EAAE,CAACf,eAAe,CAAC,CAAC,CAAC,CAAC;;EAEvB,oBACEd,OAAA,CAAAE,SAAA;IAAAI,QAAA,EACGQ,eAAe;IAAA;IACd;IACAd,OAAA,CAAAE,SAAA;MAAAI,QAAA,gBACEN,OAAA,CAACL,MAAM;QAACuC,QAAQ,EAAER;MAAa;QAAAlB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAClCX,OAAA,CAACR,MAAM;QAAAc,QAAA,gBACLN,OAAA,CAACT,KAAK;UAAC4C,IAAI,EAAC,GAAG;UAACC,OAAO,eAAEpC,OAAA,CAACJ,UAAU;YAAAY,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC3CX,OAAA,CAACT,KAAK;UAAC4C,IAAI,EAAC,UAAU;UAACC,OAAO,eAAEpC,OAAA,CAACJ,UAAU;YAAAY,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAClDX,OAAA,CAACT,KAAK;UAAC4C,IAAI,EAAC,UAAU;UAACC,OAAO,eAAEpC,OAAA,CAACH,OAAO;YAAAW,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEzC,CAAC;IAAA,eACT,CAAC;IAAA;IAEH;IACAX,OAAA,CAACR,MAAM;MAAAc,QAAA,gBACLN,OAAA,CAACT,KAAK;QAAC4C,IAAI,EAAC,QAAQ;QAACC,OAAO,eAAEpC,OAAA,CAACF,SAAS;UAACuC,OAAO,EAAEb;QAAY;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACrEX,OAAA,CAACT,KAAK;QAAC4C,IAAI,EAAC,GAAG;QAACC,OAAO,eAAEpC,OAAA,CAACN,QAAQ;UAAC4C,EAAE,EAAC;QAAQ;UAAA9B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C;EACT,gBACD,CAAC;AAEP;AAACE,EAAA,CApFQN,SAAS;EAAA,QAUCd,WAAW;AAAA;AAAA8C,GAAA,GAVrBhC,SAAS;AAsFlB,eAAeH,GAAG;AAAC,IAAAQ,EAAA,EAAA2B,GAAA;AAAAC,YAAA,CAAA5B,EAAA;AAAA4B,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}