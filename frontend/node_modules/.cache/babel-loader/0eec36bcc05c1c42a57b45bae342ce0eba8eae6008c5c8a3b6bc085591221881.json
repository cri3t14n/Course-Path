{"ast":null,"code":"import plans from './degreeCourses.json';\nexport const extractPlanNames = () => {\n  return plans.map(plan => plan.planName);\n};\nexport const findPlanByID = planID => {\n  return plans.find(plan => plan.planID === planID);\n};\nexport const findCategoryByID = (planID, categoryID) => {\n  const plan = findPlanByID(planID);\n  return plan.find(category => category.categoryID === categoryID);\n};\nexport const countTotalGroups = planID => {\n  const plan = findPlanByID(planID);\n  return plan.degreeCourses.length;\n};\nexport const countTotalCourses = planID => {\n  const plan = findPlanByID(planID);\n  return plan.degreeCourses.reduce((count, category) => count + category.courses.length, 0);\n};\nexport const countTotalScheduleCourses = planID => {\n  const plan = findPlanByID(planID);\n  return plan.schedule.reduce((total, term) => total + term.coursesNr.length, 0);\n};\nexport const getTotalECTS = planID => {\n  return findPlanByID(planID).totalECTS;\n};\nexport const getDegreeName = planID => {\n  return findPlanByID(planID).degree;\n};\nexport const countTotalScheduleECTS = planID => {\n  const plan = findPlanByID(planID);\n  const allCoursesNr = plan.schedule.flatMap(term => term.coursesNr);\n  const allCourses = plan.degreeCourses.flatMap(category => category.courses);\n  return allCourses.filter(course => allCoursesNr.includes(course.courseNr)).reduce((total, course) => total + course.ects, 0);\n};\nexport const countCoursesInSchedule = (planID, courseNrs) => {\n  const plan = findPlanByID(planID);\n  const scheduleCourseNrs = plan.schedule.flatMap(term => term.coursesNr);\n  const count = courseNrs.reduce((total, courseNr) => {\n    return total + (scheduleCourseNrs.includes(courseNr) ? 1 : 0);\n  }, 0);\n  return count;\n};","map":{"version":3,"names":["plans","extractPlanNames","map","plan","planName","findPlanByID","planID","find","findCategoryByID","categoryID","category","countTotalGroups","degreeCourses","length","countTotalCourses","reduce","count","courses","countTotalScheduleCourses","schedule","total","term","coursesNr","getTotalECTS","totalECTS","getDegreeName","degree","countTotalScheduleECTS","allCoursesNr","flatMap","allCourses","filter","course","includes","courseNr","ects","countCoursesInSchedule","courseNrs","scheduleCourseNrs"],"sources":["/Users/cristianplacinta/DTU/Course-Path/frontend/src/components/Planner/utils.js"],"sourcesContent":["import plans from './degreeCourses.json'\n\nexport const extractPlanNames = () => {\n  return plans.map(plan => plan.planName)\n}\n\nexport const findPlanByID = (planID) => {\n  return plans.find(plan => plan.planID === planID)\n}\n\nexport const findCategoryByID = (planID, categoryID) => {\n    const plan = findPlanByID(planID)\n    return plan.find(category => category.categoryID === categoryID)\n}\n\nexport const countTotalGroups = (planID) => {\n  const plan = findPlanByID(planID)\n  return plan.degreeCourses.length\n}\n\nexport const countTotalCourses = (planID) => {\n  const plan = findPlanByID(planID)\n  return plan.degreeCourses.reduce((count, category) => count + category.courses.length, 0)\n}\n\nexport const countTotalScheduleCourses = (planID) => {\n  const plan = findPlanByID(planID)\n  return plan.schedule.reduce((total, term) => total + term.coursesNr.length, 0)\n}\n\nexport const getTotalECTS = (planID) => {\n  return findPlanByID(planID).totalECTS\n}\n\nexport const getDegreeName = (planID) => {\n  return findPlanByID(planID).degree\n}\n\nexport const countTotalScheduleECTS = (planID) => {\n  const plan = findPlanByID(planID)\n  const allCoursesNr = plan.schedule.flatMap(term => term.coursesNr)\n  const allCourses = plan.degreeCourses.flatMap(category => category.courses)\n  return allCourses\n    .filter(course => allCoursesNr.includes(course.courseNr))\n    .reduce((total, course) => total + course.ects, 0)\n}\n\nexport const countCoursesInSchedule = (planID, courseNrs) => {\n    const plan = findPlanByID(planID)\n    \n    const scheduleCourseNrs = plan.schedule.flatMap(term => term.coursesNr)\n    const count = courseNrs.reduce((total, courseNr) => {\n      return total + (scheduleCourseNrs.includes(courseNr) ? 1 : 0)\n    }, 0)\n  \n    return count\n}\n   "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}